// Generated by gencpp from file fsd_common_msgs/ASENSING.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_ASENSING_H
#define FSD_COMMON_MSGS_MESSAGE_ASENSING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct ASENSING_
{
  typedef ASENSING_<ContainerAllocator> Type;

  ASENSING_()
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , ground_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , x_angular_velocity(0.0)
    , y_angular_velocity(0.0)
    , z_angular_velocity(0.0)
    , x_acc(0.0)
    , y_acc(0.0)
    , z_acc(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , ground_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , azimuth_std(0.0)
    , ins_status(0)
    , position_type(0)
    , sec_of_week(0.0)
    , gps_week_number(0.0)
    , temperature(0.0)
    , wheel_speed_status(0)
    , heading_type(0)
    , numsv(0)  {
    }
  ASENSING_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , ground_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , x_angular_velocity(0.0)
    , y_angular_velocity(0.0)
    , z_angular_velocity(0.0)
    , x_acc(0.0)
    , y_acc(0.0)
    , z_acc(0.0)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , altitude_std(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , ground_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , azimuth_std(0.0)
    , ins_status(0)
    , position_type(0)
    , sec_of_week(0.0)
    , gps_week_number(0.0)
    , temperature(0.0)
    , wheel_speed_status(0)
    , heading_type(0)
    , numsv(0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _north_velocity_type;
  _north_velocity_type north_velocity;

   typedef double _east_velocity_type;
  _east_velocity_type east_velocity;

   typedef double _ground_velocity_type;
  _ground_velocity_type ground_velocity;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef double _x_angular_velocity_type;
  _x_angular_velocity_type x_angular_velocity;

   typedef double _y_angular_velocity_type;
  _y_angular_velocity_type y_angular_velocity;

   typedef double _z_angular_velocity_type;
  _z_angular_velocity_type z_angular_velocity;

   typedef double _x_acc_type;
  _x_acc_type x_acc;

   typedef double _y_acc_type;
  _y_acc_type y_acc;

   typedef double _z_acc_type;
  _z_acc_type z_acc;

   typedef float _latitude_std_type;
  _latitude_std_type latitude_std;

   typedef float _longitude_std_type;
  _longitude_std_type longitude_std;

   typedef float _altitude_std_type;
  _altitude_std_type altitude_std;

   typedef float _north_velocity_std_type;
  _north_velocity_std_type north_velocity_std;

   typedef float _east_velocity_std_type;
  _east_velocity_std_type east_velocity_std;

   typedef float _ground_velocity_std_type;
  _ground_velocity_std_type ground_velocity_std;

   typedef float _roll_std_type;
  _roll_std_type roll_std;

   typedef float _pitch_std_type;
  _pitch_std_type pitch_std;

   typedef float _azimuth_std_type;
  _azimuth_std_type azimuth_std;

   typedef uint32_t _ins_status_type;
  _ins_status_type ins_status;

   typedef uint32_t _position_type_type;
  _position_type_type position_type;

   typedef double _sec_of_week_type;
  _sec_of_week_type sec_of_week;

   typedef double _gps_week_number_type;
  _gps_week_number_type gps_week_number;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef uint32_t _wheel_speed_status_type;
  _wheel_speed_status_type wheel_speed_status;

   typedef uint32_t _heading_type_type;
  _heading_type_type heading_type;

   typedef uint32_t _numsv_type;
  _numsv_type numsv;





  typedef boost::shared_ptr< ::fsd_common_msgs::ASENSING_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::ASENSING_<ContainerAllocator> const> ConstPtr;

}; // struct ASENSING_

typedef ::fsd_common_msgs::ASENSING_<std::allocator<void> > ASENSING;

typedef boost::shared_ptr< ::fsd_common_msgs::ASENSING > ASENSINGPtr;
typedef boost::shared_ptr< ::fsd_common_msgs::ASENSING const> ASENSINGConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::ASENSING_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::ASENSING_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::ASENSING_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.north_velocity == rhs.north_velocity &&
    lhs.east_velocity == rhs.east_velocity &&
    lhs.ground_velocity == rhs.ground_velocity &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.azimuth == rhs.azimuth &&
    lhs.x_angular_velocity == rhs.x_angular_velocity &&
    lhs.y_angular_velocity == rhs.y_angular_velocity &&
    lhs.z_angular_velocity == rhs.z_angular_velocity &&
    lhs.x_acc == rhs.x_acc &&
    lhs.y_acc == rhs.y_acc &&
    lhs.z_acc == rhs.z_acc &&
    lhs.latitude_std == rhs.latitude_std &&
    lhs.longitude_std == rhs.longitude_std &&
    lhs.altitude_std == rhs.altitude_std &&
    lhs.north_velocity_std == rhs.north_velocity_std &&
    lhs.east_velocity_std == rhs.east_velocity_std &&
    lhs.ground_velocity_std == rhs.ground_velocity_std &&
    lhs.roll_std == rhs.roll_std &&
    lhs.pitch_std == rhs.pitch_std &&
    lhs.azimuth_std == rhs.azimuth_std &&
    lhs.ins_status == rhs.ins_status &&
    lhs.position_type == rhs.position_type &&
    lhs.sec_of_week == rhs.sec_of_week &&
    lhs.gps_week_number == rhs.gps_week_number &&
    lhs.temperature == rhs.temperature &&
    lhs.wheel_speed_status == rhs.wheel_speed_status &&
    lhs.heading_type == rhs.heading_type &&
    lhs.numsv == rhs.numsv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::ASENSING_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::ASENSING_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::ASENSING_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::ASENSING_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::ASENSING_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71cc4b05e9f3e6f366c4fb6f4c0ec4ed";
  }

  static const char* value(const ::fsd_common_msgs::ASENSING_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71cc4b05e9f3e6f3ULL;
  static const uint64_t static_value2 = 0x66c4fb6f4c0ec4edULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/ASENSING";
  }

  static const char* value(const ::fsd_common_msgs::ASENSING_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 latitude	\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
"float64 north_velocity	\n"
"float64 east_velocity\n"
"float64 ground_velocity\n"
"\n"
"float64 roll	\n"
"float64 pitch\n"
"float64 azimuth\n"
"\n"
"float64 x_angular_velocity	\n"
"float64 y_angular_velocity\n"
"float64 z_angular_velocity\n"
"\n"
"float64 x_acc	\n"
"float64 y_acc\n"
"float64 z_acc\n"
"\n"
"float32 latitude_std	\n"
"float32 longitude_std\n"
"float32 altitude_std\n"
"\n"
"float32 north_velocity_std	\n"
"float32 east_velocity_std\n"
"float32 ground_velocity_std\n"
"\n"
"\n"
"float32 roll_std	\n"
"float32 pitch_std\n"
"float32 azimuth_std \n"
"\n"
"\n"
"uint32 ins_status	\n"
"uint32 position_type	 \n"
"\n"
"float64 sec_of_week	\n"
"\n"
"float64 gps_week_number		\n"
"\n"
"float32 temperature	\n"
"\n"
"uint32 wheel_speed_status	\n"
"\n"
"\n"
"\n"
"uint32 heading_type		\n"
"uint32 numsv		\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::fsd_common_msgs::ASENSING_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.north_velocity);
      stream.next(m.east_velocity);
      stream.next(m.ground_velocity);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.azimuth);
      stream.next(m.x_angular_velocity);
      stream.next(m.y_angular_velocity);
      stream.next(m.z_angular_velocity);
      stream.next(m.x_acc);
      stream.next(m.y_acc);
      stream.next(m.z_acc);
      stream.next(m.latitude_std);
      stream.next(m.longitude_std);
      stream.next(m.altitude_std);
      stream.next(m.north_velocity_std);
      stream.next(m.east_velocity_std);
      stream.next(m.ground_velocity_std);
      stream.next(m.roll_std);
      stream.next(m.pitch_std);
      stream.next(m.azimuth_std);
      stream.next(m.ins_status);
      stream.next(m.position_type);
      stream.next(m.sec_of_week);
      stream.next(m.gps_week_number);
      stream.next(m.temperature);
      stream.next(m.wheel_speed_status);
      stream.next(m.heading_type);
      stream.next(m.numsv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ASENSING_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::ASENSING_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::ASENSING_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "north_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity);
    s << indent << "east_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity);
    s << indent << "ground_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.ground_velocity);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "x_angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.x_angular_velocity);
    s << indent << "y_angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.y_angular_velocity);
    s << indent << "z_angular_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.z_angular_velocity);
    s << indent << "x_acc: ";
    Printer<double>::stream(s, indent + "  ", v.x_acc);
    s << indent << "y_acc: ";
    Printer<double>::stream(s, indent + "  ", v.y_acc);
    s << indent << "z_acc: ";
    Printer<double>::stream(s, indent + "  ", v.z_acc);
    s << indent << "latitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_std);
    s << indent << "longitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_std);
    s << indent << "altitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.altitude_std);
    s << indent << "north_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.north_velocity_std);
    s << indent << "east_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.east_velocity_std);
    s << indent << "ground_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.ground_velocity_std);
    s << indent << "roll_std: ";
    Printer<float>::stream(s, indent + "  ", v.roll_std);
    s << indent << "pitch_std: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std);
    s << indent << "azimuth_std: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth_std);
    s << indent << "ins_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ins_status);
    s << indent << "position_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position_type);
    s << indent << "sec_of_week: ";
    Printer<double>::stream(s, indent + "  ", v.sec_of_week);
    s << indent << "gps_week_number: ";
    Printer<double>::stream(s, indent + "  ", v.gps_week_number);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "wheel_speed_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.wheel_speed_status);
    s << indent << "heading_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.heading_type);
    s << indent << "numsv: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.numsv);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_ASENSING_H
