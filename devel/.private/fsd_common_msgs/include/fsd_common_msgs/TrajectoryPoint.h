// Generated by gencpp from file fsd_common_msgs/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_TRAJECTORYPOINT_H
#define FSD_COMMON_MSGS_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : pts()
    , yaw()
    , curvature()
    , velocity()
    , r()
    , acc()  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : pts(_alloc)
    , yaw(_alloc)
    , curvature(_alloc)
    , velocity(_alloc)
    , r(_alloc)
    , acc(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pts_type;
  _pts_type pts;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _yaw_type;
  _yaw_type yaw;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _curvature_type;
  _curvature_type curvature;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _r_type;
  _r_type r;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _acc_type;
  _acc_type acc;





  typedef boost::shared_ptr< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::fsd_common_msgs::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::fsd_common_msgs::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::fsd_common_msgs::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.pts == rhs.pts &&
    lhs.yaw == rhs.yaw &&
    lhs.curvature == rhs.curvature &&
    lhs.velocity == rhs.velocity &&
    lhs.r == rhs.r &&
    lhs.acc == rhs.acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3b64e448d35243415e296a8071da00c";
  }

  static const char* value(const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3b64e448d352434ULL;
  static const uint64_t static_value2 = 0x15e296a8071da00cULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/TrajectoryPoint";
  }

  static const char* value(const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point pts                       #是一个二维坐标点  包含一个点在自由空间的位置\n"
"std_msgs/Float64 yaw                             #就是一个float64位的数据           航向角 yaw                 \n"
"\n"
"std_msgs/Float64 curvature            #曲率？...  根据经纬度算\n"
"std_msgs/Float64 velocity                 #速度\n"
"std_msgs/Float64 r                              #半径...车轮转角\n"
"std_msgs/Float64 acc                     #机器人加速度百分率   （不确定）\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pts);
      stream.next(m.yaw);
      stream.next(m.curvature);
      stream.next(m.velocity);
      stream.next(m.r);
      stream.next(m.acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "pts: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pts);
    s << indent << "yaw: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.yaw);
    s << indent << "curvature: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.curvature);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "r: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.r);
    s << indent << "acc: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_TRAJECTORYPOINT_H
