# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fsd_common_msgs/VehcileCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VehcileCmd(genpy.Message):
  _md5sum = "f174333528b91e4bd29b231b98ffd01e"
  _type = "fsd_common_msgs/VehcileCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 head1
uint8 head2
uint8 length
uint8 steering
uint8 brake_force
uint8 pedal_ratio
uint8 gear_position
uint8 working_mode
uint8 racing_num
uint8 racing_status
uint16 checksum

"""
  __slots__ = ['head1','head2','length','steering','brake_force','pedal_ratio','gear_position','working_mode','racing_num','racing_status','checksum']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       head1,head2,length,steering,brake_force,pedal_ratio,gear_position,working_mode,racing_num,racing_status,checksum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehcileCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.head1 is None:
        self.head1 = 0
      if self.head2 is None:
        self.head2 = 0
      if self.length is None:
        self.length = 0
      if self.steering is None:
        self.steering = 0
      if self.brake_force is None:
        self.brake_force = 0
      if self.pedal_ratio is None:
        self.pedal_ratio = 0
      if self.gear_position is None:
        self.gear_position = 0
      if self.working_mode is None:
        self.working_mode = 0
      if self.racing_num is None:
        self.racing_num = 0
      if self.racing_status is None:
        self.racing_status = 0
      if self.checksum is None:
        self.checksum = 0
    else:
      self.head1 = 0
      self.head2 = 0
      self.length = 0
      self.steering = 0
      self.brake_force = 0
      self.pedal_ratio = 0
      self.gear_position = 0
      self.working_mode = 0
      self.racing_num = 0
      self.racing_status = 0
      self.checksum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10BH().pack(_x.head1, _x.head2, _x.length, _x.steering, _x.brake_force, _x.pedal_ratio, _x.gear_position, _x.working_mode, _x.racing_num, _x.racing_status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.head1, _x.head2, _x.length, _x.steering, _x.brake_force, _x.pedal_ratio, _x.gear_position, _x.working_mode, _x.racing_num, _x.racing_status, _x.checksum,) = _get_struct_10BH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10BH().pack(_x.head1, _x.head2, _x.length, _x.steering, _x.brake_force, _x.pedal_ratio, _x.gear_position, _x.working_mode, _x.racing_num, _x.racing_status, _x.checksum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.head1, _x.head2, _x.length, _x.steering, _x.brake_force, _x.pedal_ratio, _x.gear_position, _x.working_mode, _x.racing_num, _x.racing_status, _x.checksum,) = _get_struct_10BH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10BH = None
def _get_struct_10BH():
    global _struct_10BH
    if _struct_10BH is None:
        _struct_10BH = struct.Struct("<10BH")
    return _struct_10BH
